#summary Come implementare un algoritmo genetico

Le funzioni obbligatorie da sovrascrivere sono:

*generateFirstPopulation()*: funzione che genererà la popolazione iniziale.

*computeFitness()*: funzione che serve a capire quali sono gli individui migliori secondo determinati parametri, migliore è la funzione di fitness e meglio lavorerà l'algoritmo genetico.

*bestSolutionIsSatisfactory()*: funzione che serve a determinare se la soluzione ottima è ammissibile.

Le altre funzioni se non sovrascritte opereranno con funzioni di default. Per modificare le altre funzioni si dia uno sguardo alle loro implementazioni nella classe Population.java della libreria. Nel progetto sono presenti degli esempi concreti di implementazione di algoritmi genetici più o meno complessi, come il problema TSP e il problema (semplificato) del Course TimeTabling.

Nella directory del progetto deve essere presente un file di configurazione chiamato config.properties avente il seguente schema:

{{{
NumberOfPopulations=5
NPointCrossover=2
ProbabilityOfMutation=5
ProbabilityOfCrossover=95
DimensionOfPopulation=100
NumberOfGenerations=1000
NumberOfGenerationsOfMergedPopulations=1000
}}}

Il codice di base per programmare il proprio algoritmo genetico è il seguente:

{{{
import it.uniroma3.dia.Chromosome;
import it.uniroma3.dia.Population;
import it.uniroma3.dia.World;
import it.uniroma3.dia.events.EventFinishGA;

public class SchemeClassGA extends Population{
	
	public static void main(String[] args) throws Exception {		
		World world = new World(SchemeClassGA.class);	
		world.evolve();	
	}
	
	public SchemeClassGA() {
		super();
	}

	@Override
	public void generateFirstPopulation() {
		// TODO Auto-generated method stub
		int dimensionOfChromosome = 10;
		for(int i = 0; i<config.getDimensionOfPopulation(); i++){
			this.chromosomes[i] = new Chromosome(dimensionOfChromosome);
			
			for(int j = 0; j<dimensionOfChromosome; j++){
				this.chromosomes[i].setGene("X", j);
			}
		}
	}

	@Override
	public double computeFitness(Chromosome chromosome) {
		// TODO Auto-generated method stub
		return Math.random();
	}

	@Override
	public boolean bestSolutionIsSatisfactory(Chromosome chromosome) {
		// TODO Auto-generated method stub
		return true;
	}
	
	@Override
	public void doCrossover(Chromosome chromosome1, Chromosome chromosome2) {
		super.doCrossover(chromosome1, chromosome2);
	}

	@Override
	public void doMutation(Chromosome chromosome) {
		super.doMutation(chromosome);
	}
	
	@Override
	public void replacePopulation(Chromosome[] newGeneration){
		super.replacePopulation(newGeneration);
	}
	
	@Override
	public Chromosome[] generateMatingPool(){
		return super.generateMatingPool();
	}

	@Override
	public void populationEvolutionFinished(EventFinishGA evt) {
		if(!this.isInEvolution())
			System.out.println("Best in Population "+this.nameOfPopulation+" in "+evt.getNumberOfGenerations()+" generations : "+this.bestChromosome());
	}
}
}}}